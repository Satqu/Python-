import dis
import types
import marshal

def add_numbers(a, b):
    return a + b

print("Оригінальний байткод функції add_numbers:")
dis.dis(add_numbers)
original_code = add_numbers.__code__
new_code = original_code.co_code.replace(b'\x17', b'\x37')

new_code_obj = types.CodeType(
    original_code.co_argcount,
    original_code.co_posonlyargcount,
    original_code.co_kwonlyargcount,
    original_code.co_nlocals,
    original_code.co_stacksize,
    original_code.co_flags,
    new_code,
    original_code.co_consts,
    original_code.co_names,
    original_code.co_varnames,
    original_code.co_filename,
    original_code.co_name,
    original_code.co_firstlineno,
    original_code.co_lnotab,
    original_code.co_freevars,
    original_code.co_cellvars 
)

add_numbers.__code__ = new_code_obj

print("\nЗмінений байткод функції add_numbers:")
dis.dis(add_numbers)

result = add_numbers(10, 20)
print("\nРезультат виклику функції після обфускації:", result)

serialized_code = marshal.dumps(new_code_obj)  # Перетворюємо байткод у байти

with open("obfuscated_code.bin", "wb") as f:
    f.write(serialized_code)

with open("obfuscated_code.bin", "rb") as f:
    loaded_code = marshal.loads(f.read())  # Перетворюємо байти назад у байткод

def loaded_add_numbers(a, b):
    return a + b

loaded_add_numbers.__code__ = loaded_code
loaded_result = loaded_add_numbers(30, 40)

print("\nРезультат виклику функції з завантаженого байткоду:", loaded_result)
result = add_numbers(10, 20)
print("\nРезультат виклику функції після обфускації:", result)

serialized_code = marshal.dumps(new_code_obj)

with open("obfuscated_code.bin", "wb") as f:
    f.write(serialized_code)

with open("obfuscated_code.bin", "rb") as f:
    loaded_code = marshal.loads(f.read())

def loaded_add_numbers(a, b):
    return a + b

loaded_add_numbers.__code__ = loaded_code
loaded_result = loaded_add_numbers(30, 40)
print("\nРезультат виклику функції з завантаженого байткоду:", loaded_result)